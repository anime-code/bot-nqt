const { Client, GatewayIntentBits, Partials, SlashCommandBuilder, EmbedBuilder } = require('discord.js');
const schedule = require('node-schedule');
const winston = require('winston');
const axios = require('axios');
require('dotenv').config();

// Load user mapping from users.json
const userMapping = require('./users.json');

// Custom transport ƒë·ªÉ g·ª≠i log t·ªõi Discord
class DiscordTransport extends winston.transports.Console {
    constructor(options) {
        super(options);
        this.name = 'discord';
        this.level = options.level || 'info';
    }

    async log(info, callback) {
        const { timestamp, level, message } = info;
        const logMessage = `${timestamp} [${level.toUpperCase()}]: ${message}`;
        if (this.logChannel) {
            try {
                await this.logChannel.send(logMessage);
            } catch (err) {
                logger.error(`‚ùå L·ªói khi g·ª≠i log t·ªõi Discord: ${err.message}`);
            }
        }
        callback();
    }
}

// Kh·ªüi t·∫°o logger v·ªõi DiscordTransport
const logger = winston.createLogger({
    level: 'info',
    format: winston.format.combine(
        winston.format.timestamp({ format: 'YYYY-MM-DD HH:mm:ss' }),
        winston.format.printf(({ timestamp, level, message }) => `${timestamp} [${level.toUpperCase()}]: ${message}`)
    ),
    transports: [
        new winston.transports.Console(),
        new winston.transports.File({ filename: 'bot.log' }),
        new DiscordTransport({ level: 'info' }),
    ],
});

const client = new Client({
    intents: [
        GatewayIntentBits.Guilds,
        GatewayIntentBits.GuildMessages,
        GatewayIntentBits.MessageContent,
    ],
    partials: [Partials.Channel],
});

// H√†m t·∫°o Embed ng·∫´u nhi√™n cho th√¥ng b√°o ngh·ªâ tr∆∞a
const getRandomLunchEmbed = () => {
    const lunchMessages = [
        {
            description: 'üçú **T√®n ten!** ƒê·∫øn gi·ªù **ngh·ªâ tr∆∞a** r·ªìi n√®! üòã ƒêi ƒÉn ph·ªü hay b√∫n g√¨ ngon ƒëi, 12:00 tr∆∞a r√πi! ü•≥',
            thumbnail: 'https://vietour.vn/images/hinh-bat-pho-vietour01.jpg'
        },
        {
            description: 'üçî **12:00 tr∆∞a** r·ªìi! Gi·ªù **ngh·ªâ tr∆∞a** n√®, ai ƒÉn burger, ai ƒÉn c∆°m t·∫•m ƒë√¢y? üòé Let‚Äôs go! üéà',
            thumbnail: 'https://media.istockphoto.com/id/1412706588/vi/anh/hamburger-tr%C3%AAn-th%E1%BB%9Bt-th%E1%BB%A7-c%C3%B4ng-n%E1%BB%81n-t%C3%A2m-tr%E1%BA%A1ng-t%E1·ªñ1.jpg?s=612x612&w=0&k=20&c=xSxOsMObANKGI_AkLj0x29I1UqM84QYMbNeCJ4Sg8nY='
        },
        {
            description: 'üç£ **Ngh·ªâ tr∆∞a** th√¥i n√†o! Sushi, b√°nh x√®o hay tr√† s·ªØa, ch·ªçn g√¨ ƒë√¢y? üòã **12:00** nha m·ªçi ng∆∞·ªùi! üö¥‚Äç‚ôÇÔ∏è',
            thumbnail: 'https://media.istockphoto.com/id/1555947107/vi/anh/set-sushi-v%C3%A0-maki.jpg?s=612x612&w=0&k=20&c=r_heT_qgK5SYpLrFd5M-U9v81w5kcj5zok05AZl5_rw='
        }
    ];
    return lunchMessages[Math.floor(Math.random() * lunchMessages.length)];
};

// H√†m fetchNonSubmitters ƒë·ªÉ l·∫•y danh s√°ch ng∆∞·ªùi ch∆∞a n·ªôp b√°o c√°o
const fetchNonSubmitters = async (date, teamIds) => {
    const nonSubmitters = [];
    const errors = [];
    const cookie = `en; fuel_csrf_token=${process.env.FUEL_CSRF_TOKEN}; fuelfid=${process.env.FUELFID}; rmcookie=${process.env.RMCOOKIE}`;

    for (const teamId of teamIds) {
        let start = 0;
        const length = 20;
        let totalRecords = 0;

        do {
            try {
                const queryParams = {
                    draw: 1,
                    start: start,
                    length: length,
                    team_id: teamId,
                    date: date,
                };

                const response = await axios.get(process.env.WORK_REPORT_URL, {
                    params: queryParams,
                    headers: {
                        'x-requested-with': 'XMLHttpRequest',
                        'Cookie': cookie,
                    },
                });

                const reports = response.data.data || [];
                totalRecords = response.data.recordsTotal || 0;
                const teamNonSubmitters = reports
                    .filter(report => !report.reported)
                    .map(report => ({ ...report, team_id: teamId }));
                nonSubmitters.push(...teamNonSubmitters);
                logger.info(`‚úÖ Fetched ${reports.length} reports for team ${teamId} (start: ${start}) on ${date}`);
                start += length;
            } catch (err) {
                const errorMsg = `‚ùå Error fetching reports for team ${teamId} (start: ${start}) on ${date}: ${err.message}`;
                errors.push(errorMsg);
                logger.error(errorMsg);
                if (err.response?.status === 401 || err.response?.status === 403) {
                    const logChannel = client.channels.cache.get(process.env.LOG_CHANNEL_ID);
                    if (logChannel) {
                        await retrySendMessage(logChannel, `‚ö† Cookie ho·∫∑c token h·∫øt h·∫°n cho team ${teamId}! Vui l√≤ng c·∫≠p nh·∫≠t FUELFID v√† RMCOOKIE.`);
                    }
                }
                break;
            }
        } while (start < totalRecords);
    }

    return { nonSubmitters, errors };
};

// M·∫£ng reminders v·ªõi Embeds
const reminders = [
    {
        time: '0 59 8 * * 1-5',
        embed: () => new EmbedBuilder()
            .setTitle('üåû **ASAKAI TIME!**')
            .setDescription('üöÄ **S√°ng r·ª±c r·ª° r·ªìi!** M·ªçi ng∆∞·ªùi s·∫µn s√†ng h·ªçp ASAKAI ch∆∞a? üí™ **8:59 s√°ng** n√®, v√†o th√¥i n√†o! üéâ')
            .setColor('#FFD700')
            .addFields(
                { name: '‚è∞ Th·ªùi gian', value: '8:59 AM', inline: true },
                { name: 'üìç K√™nh h·ªçp', value: 'Ki·ªÉm tra Zoom/Discord nha!', inline: true }
            )
            .setThumbnail('https://st.quantrimang.com/photos/image/2020/12/25/Hinh-chuc-buoi-sang-4.jpg')
            .setFooter({ text: 'Bot nh·∫Øc nh·ªü si√™u x·ªãn by NQT', iconURL: client.user.displayAvatarURL() })
            .setTimestamp()
    },
    {
        time: '0 55 11 * * 1-5',
        embed: () => {
            const { description, thumbnail } = getRandomLunchEmbed();
            return new EmbedBuilder()
                .setTitle('üç¥ **GI·ªú NGH·ªà TR∆ØA!**')
                .setDescription(description)
                .setColor('#00FF7F')
                .addFields(
                    { name: '‚è∞ Th·ªùi gian', value: '11:55 PM', inline: true },
                    { name: 'üçΩ G·ª£i √Ω', value: 'ƒÇn g√¨ ngon th√¨ share nha!', inline: true }
                )
                .setThumbnail(thumbnail)
                .setFooter({ text: 'Bot nh·∫Øc nh·ªü si√™u x·ªãn by NQT', iconURL: client.user.displayAvatarURL() })
                .setTimestamp();
        }
    },
    {
        time: '0 45 16 * * 1-5',
        embed: () => new EmbedBuilder()
            .setTitle('üìù **H·∫æU H·∫æU! DAILY REPORT TIME!**')
            .setDescription('‚è∞ **16:45 chi·ªÅu** r·ªìi n√®! ƒê·ª´ng qu√™n **b√°o c√°o ng√†y** nha m·ªçi ng∆∞·ªùi! üìä Nhanh tay v√†o link b√°o c√°o n√†o! üí™')
            .setColor('#FF4500')
            .addFields(
                { name: '‚è∞ Th·ªùi gian', value: '4:45 PM', inline: true },
                { name: 'üîó Link b√°o c√°o', value: '[Work Report](https://work-report.thk-hd-hn.vn/)', inline: true }
            )
            .setThumbnail('https://png.pngtree.com/png-clipart/20190614/original/pngtree-report-writing-line-filled-icon-png-image_3789245.jpg')
            .setFooter({ text: 'Bot nh·∫Øc nh·ªü si√™u x·ªãn by NQT', iconURL: client.user.displayAvatarURL() })
            .setTimestamp()
    }
];

// C·∫≠p nh·∫≠t retrySendMessage ƒë·ªÉ h·ªó tr·ª£ c·∫£ chu·ªói v√† embeds
const retrySendMessage = async (channel, content, retries = 3, delay = 5000) => {
    for (let i = 0; i < retries; i++) {
        try {
            if (typeof content === 'string') {
                await channel.send({ content });
            } else {
                await channel.send({ content: '@everyone', embeds: [content] });
            }
            return true;
        } catch (err) {
            logger.error(`‚ùå L·ªói khi g·ª≠i tin nh·∫Øn (l·∫ßn ${i + 1}/${retries}): ${err.message}, Channel ID: ${channel?.id || 'Kh√¥ng x√°c ƒë·ªãnh'}`);
            if (i < retries - 1) {
                logger.info(`‚è≥ Th·ª≠ l·∫°i sau ${delay / 1000} gi√¢y...`);
                await new Promise(resolve => setTimeout(resolve, delay));
            }
        }
    }
    return false;
};

// client.once('ready')
client.once('ready', async () => {
    console.log(`‚úÖ Bot ${client.user.tag} ƒë√£ s·∫µn s√†ng!`);
    logger.info(`‚è∞ Th·ªùi gian hi·ªán t·∫°i khi kh·ªüi ƒë·ªông: ${new Date().toString()}`);

    const channel = client.channels.cache.get(process.env.CHANNEL_ID) || await client.channels.fetch(process.env.CHANNEL_ID);
    const logChannel = client.channels.cache.get(process.env.LOG_CHANNEL_ID) || await client.channels.fetch(process.env.LOG_CHANNEL_ID);

    if (!channel) {
        logger.error('‚ùå Kh√¥ng t√¨m th·∫•y k√™nh ch√≠nh! Ki·ªÉm tra l·∫°i CHANNEL_ID.');
        return;
    }

    if (!logChannel) {
        logger.error('‚ùå Kh√¥ng t√¨m th·∫•y k√™nh log! Ki·ªÉm tra l·∫°i LOG_CHANNEL_ID.');
    } else {
        logger.transports.find(transport => transport instanceof DiscordTransport).logChannel = logChannel;
    }

    // Set time zone for scheduling
    // schedule.setDefaultTimeZone('Asia/Ho_Chi_Minh');

    // L√™n l·ªãch g·ª≠i log m·ªói 1 gi·ªù
    schedule.scheduleJob('log-every-hour', '0 * * * *', async () => {
        if (logChannel) {
            const logMessage = `üìä [STATUS] Bot ƒëang ho·∫°t ƒë·ªông. S·ªë nh·∫Øc nh·ªü: ${reminders.length}. Th·ªùi gian: ${new Date().toString()}`;
            const success = await retrySendMessage(logChannel, logMessage);
            if (success) {
                logger.info(`‚úÖ ƒê√£ g·ª≠i log tr·∫°ng th√°i ƒë·ªãnh k·ª≥`);
            } else {
                logger.error(`‚ùå Kh√¥ng th·ªÉ g·ª≠i log tr·∫°ng th√°i ƒë·ªãnh k·ª≥`);
            }
        }
    });
    logger.info('üìÖ ƒê√£ l√™n l·ªãch log tr·∫°ng th√°i m·ªói 1 gi·ªù');

    // L√™n l·ªãch c√°c nh·∫Øc nh·ªü
    reminders.forEach((reminder, index) => {
        schedule.scheduleJob(`reminder-${index}`, reminder.time, async () => {
            logger.info(`‚è∞ ƒêang ch·∫°y l·ªãch tr√¨nh nh·∫Øc nh·ªü ${index + 1} v√†o ${new Date().toString()}`);
            logger.info(`üîç K√™nh ch√≠nh: ${channel ? channel.id : 'Kh√¥ng t√¨m th·∫•y'}`);
            const success = await retrySendMessage(channel, reminder.embed());
            if (success) {
                logger.info(`‚úÖ ƒê√£ g·ª≠i nh·∫Øc nh·ªü: ${reminder.embed().data.description}`);
            } else {
                logger.error(`‚ùå Kh√¥ng th·ªÉ g·ª≠i nh·∫Øc nh·ªü sau nhi·ªÅu l·∫ßn th·ª≠`);
            }
        });
        logger.info(`üìÖ ƒê√£ l√™n l·ªãch nh·∫Øc nh·ªü ${index + 1} v√†o ${reminder.time}`);
    });

    // Scheduled task for non-submitters report at 5:00 PM
    schedule.scheduleJob('non-submitter-report', '0 0 17 * * 1-5', async () => {
        logger.info(`‚è∞ ƒêang ch·∫°y b√°o c√°o non-submitters v√†o ${new Date().toString()}`);
        try {
            const today = new Date().toISOString().split('T')[0];
            const teamIds = process.env.TEAM_IDS.split(',').map(id => id.trim());
            const { nonSubmitters, errors } = await fetchNonSubmitters(today, teamIds);

            if (errors.length > 0) {
                logger.warn(`‚ö† C√≥ l·ªói khi l·∫•y danh s√°ch non-submitters: ${errors.join('; ')}`);
                if (logChannel) {
                    await retrySendMessage(logChannel, `‚ö† C√≥ l·ªói khi l·∫•y danh s√°ch non-submitters: ${errors.join('; ')}`);
                }
            }

            logger.info(`üìã T√¨m th·∫•y ${nonSubmitters.length} ng∆∞·ªùi ch∆∞a n·ªôp b√°o c√°o`);
            if (nonSubmitters.length === 0 && errors.length <= 0) {
                const embed = new EmbedBuilder()
                    .setTitle('‚úÖ **[B√ÅO C√ÅO 5H] T√¨nh H√¨nh B√°o C√°o**')
                    .setDescription('üéâ T·∫•t c·∫£ ƒë√£ n·ªôp b√°o c√°o h√¥m nay! Gi·ªØ v·ªØng phong ƒë·ªô nha m·ªçi ng∆∞·ªùi! üí™')
                    .setColor('#00FF7F') // Green to indicate success
                    .addFields(
                        { name: '‚è∞ Th·ªùi gian', value: '5:00 PM', inline: true },
                        { name: 'üìÖ Ng√†y', value: today, inline: true }
                    )
                    .setThumbnail('https://png.pngtree.com/png-clipart/20190614/original/pngtree-report-writing-line-filled-icon-png-image_3789245.jpg')
                    .setFooter({ text: 'Bot nh·∫Øc nh·ªü si√™u x·ªãn by NQT', iconURL: client.user.displayAvatarURL() })
                    .setTimestamp();
                await retrySendMessage(channel, embed);
                if (logChannel) {
                    await retrySendMessage(logChannel, '‚úÖ [B√ÅO C√ÅO 5H] T·∫•t c·∫£ ƒë√£ n·ªôp b√°o c√°o!');
                }
                return;
            }

            const taggedUsers = new Set();
            const nonSubmitterDetails = [];
            for (const user of nonSubmitters) {
                const discordId = userMapping[user.id];
                if (!discordId) {
                    logger.warn(`‚ùå Kh√¥ng t√¨m th·∫•y Discord ID cho user ID ${user.id} (${user.fullname})`);
                    if (logChannel) {
                        await retrySendMessage(logChannel, `‚ö† Thi·∫øu Discord ID cho ${user.fullname} (ID: ${user.id})`);
                    }
                    continue;
                }
                if (taggedUsers.has(discordId)) {
                    continue;
                }
                taggedUsers.add(discordId);
                nonSubmitterDetails.push({ discordId, fullname: user.fullname, team_id: user.team_id });
            }

            if (taggedUsers.size > 0) {
                const mentions = nonSubmitterDetails.map(user => `<@${user.discordId}>`).join(', ');
                const details = nonSubmitterDetails
                    .map(user => `${user.fullname} (Team ${user.team_id})`)
                    .join(', ');
                const embed = new EmbedBuilder()
                    .setTitle('‚è∞ **[B√ÅO C√ÅO 5H] Nh·∫Øc Nh·ªü N·ªôp B√°o C√°o!**')
                    .setDescription(`${mentions}\nüìã C√°c b·∫°n **ch∆∞a n·ªôp b√°o c√°o h√¥m nay (${today})**: ${details}\nH√£y nhanh tay n·ªôp b√°o c√°o nh√©! üöÄ`)
                    .setColor('#FF4500') // Orange, matching daily report
                    .addFields(
                        { name: '‚è∞ Th·ªùi gian', value: '5:00 PM', inline: true },
                        { name: 'üîó Link b√°o c√°o', value: '[Work Report](https://work-report.thk-hd-hn.vn/)', inline: true }
                    )
                    .setThumbnail('https://png.pngtree.com/png-clipart/20190614/original/pngtree-report-writing-line-filled-icon-png-image_3789245.jpg')
                    .setFooter({ text: 'Bot nh·∫Øc nh·ªü si√™u x·ªãn by NQT', iconURL: client.user.displayAvatarURL() })
                    .setTimestamp();
                await retrySendMessage(channel, embed);
                logger.info(`‚úÖ ƒê√£ tag ${taggedUsers.size} ng∆∞·ªùi ch∆∞a n·ªôp b√°o c√°o trong k√™nh ch√≠nh`);
            }

            if (logChannel) {
                const summary = taggedUsers.size > 0
                    ? `üìã [B√ÅO C√ÅO 5H] ƒê√£ tag ${taggedUsers.size} ng∆∞·ªùi ch∆∞a n·ªôp b√°o c√°o: ${nonSubmitterDetails.map(user => user.name).join(', ')}`
                    : '‚ö† [B√ÅO C√ÅO 5H] Kh√¥ng t√¨m th·∫•y Discord ID ƒë·ªÉ tag non-submitters';
                await retrySendMessage(logChannel, summary);
            }
        } catch (err) {
            logger.error(`‚ùå L·ªói khi ch·∫°y b√°o c√°o non-submitters: ${err.message}`);
            if (logChannel) {
                await retrySendMessage(logChannel, '‚ö† [B√ÅO C√ÅO 5H] Kh√¥ng th·ªÉ ch·∫°y b√°o c√°o non-submitters. Vui l√≤ng ki·ªÉm tra log!');
            }
        }
    });
    logger.info('üìÖ ƒê√£ l√™n l·ªãch b√°o c√°o non-submitters v√†o 17:00 th·ª© 2‚Äì6');

    // ƒêƒÉng k√Ω l·ªánh slash
    try {
        const commands = [
            new SlashCommandBuilder()
                .setName('status')
                .setDescription('Ki·ªÉm tra tr·∫°ng th√°i c·ªßa bot'),
            // new SlashCommandBuilder()
            //     .setName('non-submitters')
            //     .setDescription('Ki·ªÉm tra v√† tag ng∆∞·ªùi ch∆∞a n·ªôp b√°o c√°o')
            //     .addStringOption(option =>
            //         option.setName('date')
            //             .setDescription('Ng√†y (YYYY-MM-DD)')
            //             .setRequired(false)
            //     )
            //     .setDefaultMemberPermissions('ManageGuild'),
        ];
        await client.application.commands.set(commands);
        logger.info('‚úÖ ƒê√£ ƒëƒÉng k√Ω l·ªánh slash');
    } catch (err) {
        logger.error(`‚ùå L·ªói khi ƒëƒÉng k√Ω l·ªánh slash: ${err.message}`);
    }
});

// X·ª≠ l√Ω l·ªánh slash
client.on('interactionCreate', async (interaction) => {
    if (!interaction.isCommand()) return;

    if (interaction.commandName === 'status') {
        await interaction.reply({
            content: `‚úÖ Bot ƒëang ho·∫°t ƒë·ªông! Hi·ªán t·∫°i c√≥ ${reminders.length} nh·∫Øc nh·ªü ƒë∆∞·ª£c l√™n l·ªãch. Th·ªùi gian: ${new Date().toString()}`,
            ephemeral: true,
        });
        logger.info(`üì° L·ªánh /status ƒë∆∞·ª£c g·ªçi b·ªüi ${interaction.user.tag}`);
    }

    if (interaction.commandName === 'non-submitters') {
        const channel = client.channels.cache.get(process.env.CHANNEL_ID) || await client.channels.fetch(process.env.CHANNEL_ID);
        const date = interaction.options.getString('date') || new Date().toISOString().split('T')[0];
        let summary = 'üìã Danh s√°ch ng∆∞·ªùi ch∆∞a n·ªôp b√°o c√°o:';
        try {
            const teamIds = process.env.TEAM_IDS.split(',').map(id => id.trim());
            const { nonSubmitters, errors } = await fetchNonSubmitters(date, teamIds);
            if (errors.length > 0) {
                summary += `\n‚ö† C√≥ l·ªói: ${errors.join('; ')}`;
            }
            if (nonSubmitters.length === 0) {
                summary += '\n‚úÖ T·∫•t c·∫£ ƒë√£ n·ªôp b√°o c√°o!';
            } else {
                const taggedUsers = new Set();
                const nonSubmitterDetails = [];
                for (const user of nonSubmitters) {
                    const discordId = userMapping[user.id];
                    if (!discordId || taggedUsers.has(discordId)) continue;
                    taggedUsers.add(discordId);
                    nonSubmitterDetails.push({ discordId, fullname: user.fullname, team_id: user.team_id });
                }
                if (nonSubmitterDetails.length > 0) {
                    const mentions = nonSubmitterDetails.map(user => `<@${user.discordId}>`).join(', ');
                    const details = nonSubmitterDetails
                        .map(user => `${user.fullname} (Team ${user.team_id})`)
                        .join(', ');
                    summary += `\n${mentions}\n${details}`;
                    await retrySendMessage(channel, `‚è∞ **Nh·∫Øc nh·ªü t·ª´ admin!** ${mentions}\nC√°c b·∫°n ch∆∞a n·ªôp b√°o c√°o ng√†y ${date}: ${details}\nVui l√≤ng n·ªôp t·∫°i: https://work-report.thk-hd-hn.vn/`);
                } else {
                    summary += '\n‚ö† Kh√¥ng t√¨m th·∫•y Discord ID ƒë·ªÉ tag!';
                }
            }
        } catch (err) {
            summary = '‚ö† Kh√¥ng th·ªÉ l·∫•y danh s√°ch non-submitters!';
        }
        await interaction.reply({ content: summary, ephemeral: true });
        logger.info(`üì° L·ªánh /non-submitters ƒë∆∞·ª£c g·ªçi b·ªüi ${interaction.user.tag} cho ng√†y ${date}`);
    }
});

// X·ª≠ l√Ω l·ªói
client.on('error', (err) => {
    logger.error(`‚ùå L·ªói client Discord: ${err.message}`);
});

client.on('disconnect', () => {
    logger.warn('‚ö† Bot ƒë√£ ng·∫Øt k·∫øt n·ªëi, ƒëang th·ª≠ k·∫øt n·ªëi l·∫°i...');
});

client.on('reconnecting', () => {
    logger.info('üîÑ Bot ƒëang k·∫øt n·ªëi l·∫°i...');
});

// ƒêƒÉng nh·∫≠p bot
const loginBot = async () => {
    try {
        if (!process.env.DISCORD_TOKEN) {
            logger.error('‚ùå DISCORD_TOKEN kh√¥ng ƒë∆∞·ª£c t√¨m th·∫•y trong file .env!');
            process.exit(1);
        }
        if (!process.env.LOG_CHANNEL_ID) {
            logger.error('‚ùå LOG_CHANNEL_ID kh√¥ng ƒë∆∞·ª£c t√¨m th·∫•y trong file .env!');
        }
        if (!process.env.WORK_REPORT_URL || !process.env.TEAM_IDS || !process.env.FUEL_CSRF_TOKEN || !process.env.FUELFID || !process.env.RMCOOKIE) {
            logger.error('‚ùå Thi·∫øu th√¥ng tin API trong file .env! (WORK_REPORT_URL, TEAM_IDS, FUEL_CSRF_TOKEN, FUELFID, RMCOOKIE)');
            process.exit(1);
        }
        await client.login(process.env.DISCORD_TOKEN);
        logger.info('‚úÖ ƒêƒÉng nh·∫≠p bot th√†nh c√¥ng');
    } catch (err) {
        logger.error(`‚ùå L·ªói ƒëƒÉng nh·∫≠p bot: ${err.message}`);
        process.exit(1);
    }
};
loginBot();

// Express server
const express = require('express');
const app = express();
const PORT = process.env.PORT || 3000;

app.get('/', (req, res) => res.send('Bot ƒëang ch·∫°y!'));

app.listen(PORT, () => {
    logger.info(`‚úÖ Server Express ch·∫°y tr√™n port ${PORT}`);
});

// X·ª≠ l√Ω khi bot b·ªã t·∫Øt
process.on('SIGINT', () => {
    logger.info('üì¥ Bot ƒëang t·∫Øt...');
    schedule.gracefulShutdown().then(() => {
        logger.info('üìÖ ƒê√£ h·ªßy t·∫•t c·∫£ l·ªãch tr√¨nh');
        client.destroy();
        process.exit(0);
    }).catch(err => {
        logger.error(`‚ùå L·ªói khi h·ªßy l·ªãch tr√¨nh: ${err.message}`);
        client.destroy();
        process.exit(1);
    });
});